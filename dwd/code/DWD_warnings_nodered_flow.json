[{"id":"52d2870bc6d19e70","type":"server-state-changed","z":"f6f48ab9b15b2ea2","name":"1. DWD Warnungen triggern","server":"e5ff3427.b49de8","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":["sensor.dwd_warnungen_hoerstel_current_warning_level","sensor.dwd_warnungen_hoerstel_advance_warning_level"],"entityidfiltertype":"list","outputinitially":false,"state_type":"str","haltifstate":"","halt_if_type":"str","halt_if_compare":"is_not","outputs":1,"output_only_on_state_change":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[],"x":180,"y":80,"wires":[["e66484da5b9509be"]]},{"id":"b4f8435a034c6d84","type":"api-call-service","z":"f6f48ab9b15b2ea2","name":"3.a Nachricht an Telegram senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"telegram_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.message }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":80,"wires":[[]]},{"id":"6e601b980aba4098","type":"api-call-service","z":"f6f48ab9b15b2ea2","name":"3.c Nachricht an Dashboard senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.message, '***', '**') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":240,"wires":[[]]},{"id":"89d14d3a6dbf53b8","type":"api-call-service","z":"f6f48ab9b15b2ea2","name":"3.b Nachricht an HA-App senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_galaxy_von_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.appmsg, '***', '') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":160,"wires":[[]]},{"id":"e66484da5b9509be","type":"function","z":"f6f48ab9b15b2ea2","name":"2. Warnungen auslesen und Nachricht zusammenbauen","func":"// ----------------------------------------------------------------------------\n// DWD-Warnungen - NodeRED-Funktion\n// Version: 1.20\n// Datum: 23.04.2023\n// Quelle: https://github.com/migacode/home-assistant\n// ----------------------------------------------------------------------------\n// Initialisierung\n// ----------------------------------------------------------------------------\n// Entitäten der DWD-Sensoren (vollständige Namen)\nvar dwd_entity_name_cw = 'sensor.dwd_warnungen_hoerstel_current_warning_level';\nvar dwd_entity_name_aw = 'sensor.dwd_warnungen_hoerstel_advance_warning_level';\n// ----------------------------------------------------------------------------\n// Alten Payload löschen um keine Daten daraus mit weiterzuleiten\nmsg.payload = [];\n// Symbole und Textbausteine definieren\nvar weather_warnidx = ['EIS', 'FROST', 'GEWITTER', 'HAGEL', 'HITZE', 'KALT', 'KÄLTE', 'ORKAN', 'REGEN', 'SCHNEE', 'STURM', 'WASSER', 'WIND'];\nvar weather_symbols = ['❄️', '❄️', '🌩', '🌩', '☀️', '❄️', '❄️', '🌪', '☂️', '⛄️', '🌪', '🌊', '💨'];\nvar blitz = '⚡️';\nvar trennlinie = '\\n───\\n';\n// Status aller Home Assistant Entitäten einlesen\nvar global_states = global.get('homeassistant.homeAssistant.states');\n// Daten der beiden DWD-Sensoren extrahieren\nvar entity_current_data = global_states[dwd_entity_name_cw];\nvar entity_advance_data = global_states[dwd_entity_name_aw];\n// Anzahl der vorhandenen Warnmeldungen ermitteln\nvar number_of_current_warnings = parseInt(entity_current_data.attributes.warning_count);\nvar number_of_advance_warnings = parseInt(entity_advance_data.attributes.warning_count);\nvar number_of_all_warnings = number_of_current_warnings + number_of_advance_warnings;\nif (number_of_all_warnings > 0)\n{\n  var full_message = blitz + \" ***DWD-WARNUNG\" + ((number_of_all_warnings > 1) ? 'EN (' + number_of_all_warnings + ')': '') + \"*** \" + blitz + \" (über Node-RED)\" + trennlinie;\n  var short_message = full_message;\n  // ----------------------------------------------------------------------------\n  // \"Aktuelle\" Warnmeldungen verarbeiten\n  // ----------------------------------------------------------------------------\n  if (number_of_current_warnings > 0)\n  {\n    for (var i = 1; i <= number_of_current_warnings; i++)\n    {\n      var current_headline = entity_current_data.attributes['warning_' + i + '_headline'];\n      // Wetter-Symbole zur Kopfzeile ermitteln\n      var c_weather_symbol = '';\n      for (var cw = 0; cw < weather_warnidx.length; cw++) {\n        if (current_headline.toUpperCase().indexOf(weather_warnidx[cw]) !== -1) { c_weather_symbol += weather_symbols[cw]; }\n      }\n      // Zeiten auslesen\n      var c_time_start = time_convert(entity_current_data.attributes['warning_' + i + '_start']);\n      var c_time_end = time_convert(entity_current_data.attributes['warning_' + i + '_end']);\n      // Nachrichten aus den einzelnen Warnmeldungs-Komponenten zusammenbauen und hinzufügen\n      short_message += current_headline + \" \" + c_weather_symbol + \"\\nVon \" + c_time_start + \" bis \" + c_time_end + \".\" + trennlinie;\n      short_message = short_message.replace(/ um /g, ' ');      \n      full_message += \"***\" + current_headline + \"*** \" + c_weather_symbol + \"\\n\" +\n      \"Aktuelle Warnstufe: ***\" + entity_current_data.attributes['warning_' + i + '_level'] + \"***\\n\" +\n      entity_current_data.attributes['warning_' + i + '_description'] + \"\\n\" +\n        \"Von \" + c_time_start + \" Uhr bis \" + c_time_end + \" Uhr.\" + trennlinie;\n    }\n  }\n  // ----------------------------------------------------------------------------\n  // \"Erweiterte\" Warnmeldungen verarbeiten\n  // ----------------------------------------------------------------------------\n  if (number_of_advance_warnings > 0)\n  {\n    for (var i = 1; i <= number_of_advance_warnings; i++)\n    {\n      var advance_headline = entity_advance_data.attributes['warning_' + i + '_headline'];\n      // Wetter-Symbole zur Kopfzeile ermitteln\n      var a_weather_symbol = '';\n      for (var aw = 0; aw < weather_warnidx.length; aw++) {\n        if (advance_headline.toUpperCase().indexOf(weather_warnidx[aw]) !== -1) { a_weather_symbol += weather_symbols[aw]; }\n      }\n      // Zeiten auslesen\n      var a_time_start = time_convert(entity_advance_data.attributes['warning_' + i + '_start']);\n      var a_time_end = time_convert(entity_advance_data.attributes['warning_' + i + '_end']);\n      // Nachrichten aus den einzelnen Warnmeldungs-Komponenten zusammenbauen und hinzufügen\n      short_message += advance_headline + \" \" + a_weather_symbol + \"\\nVon \" + a_time_start + \" bis \" + a_time_end + \".\" + trennlinie;\n      short_message = short_message.replace(/ um /g, ' ');      \n      full_message += \"***\" + advance_headline + \"*** \" + a_weather_symbol + \"\\n\" +\n      \"Erweiterte Warnstufe: ***\" + entity_advance_data.attributes['warning_' + i + '_level'] + \"***\\n\" +\n      entity_advance_data.attributes['warning_' + i + '_description'] + \"\\n\" +\n      \"Von \" + a_time_start + \" Uhr bis \" + a_time_end + \" Uhr.\" + trennlinie;\n    }\n  }\n}\nelse\n{\n  var full_message = \"Alle DWD-Warnmeldungen wurden aufgehoben.\";\n  var short_message = full_message;\n}\n// Fertige Nachrichten als Payload an folgende/n Node/s senden\nvar newMsg = {};\nnewMsg.payload = {\n  message: full_message.replace(/Amtliche Warnung vor /gis, ''),\n  appmsg: short_message.replace(/Amtliche Warnung vor /gis, '').substring(0, 255) + \"\\n(Details siehe HA-App)\"\n}\nnode.send(newMsg);\n// ----------------------------------------------------------------------------\n// Funktions-Node OHNE Rückmeldung beenden, da bereits Daten gesendet wurden\n// ----------------------------------------------------------------------------\nreturn null;\n// ----------------------------------------------------------------------------\n// Funktion zur Umwandlung einer ISO-Zeitangabe in ein eigenes Format\n// ----------------------------------------------------------------------------\nfunction time_convert(iso_string) {\n  var date = new Date(iso_string);\n  var year = parseInt(date.getFullYear());\n  var month = parseInt(date.getMonth()) + 1;\n  var day = parseInt(date.getDate());\n  var hour = parseInt(date.getHours());\n  var minute = parseInt(date.getMinutes());\n  if (day < 10) { day = '0' + day; }\n  if (month < 10) { month = '0' + month; }\n  if (hour < 10) { hour = '0' + hour; }\n  if (minute < 10) { minute = '0' + minute; }\n  return '***' + day + '.' + month + '.' + year + '*** um ***' + hour + ':' + minute + '***';\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":160,"wires":[["6e601b980aba4098","b4f8435a034c6d84","89d14d3a6dbf53b8"]]},{"id":"e5ff3427.b49de8","type":"server","name":"Home Assistant","addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"","connectionDelay":false,"cacheJson":false,"heartbeat":false,"heartbeatInterval":"","statusSeparator":"","enableGlobalContextStore":false}]