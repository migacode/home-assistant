[{"id":"30f31c6ed8a0bc44","type":"server-state-changed","z":"2491b5ee305ab8a7","name":"1. DWD Warnungen triggern","server":"e5ff3427.b49de8","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":["sensor.dwd_warnungen_hoerstel_current_warning_level","sensor.dwd_warnungen_hoerstel_advance_warning_level"],"entityidfiltertype":"list","outputinitially":false,"state_type":"str","haltifstate":"0","halt_if_type":"num","halt_if_compare":"is_not","outputs":2,"output_only_on_state_change":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[],"x":180,"y":80,"wires":[["62569783f79230c4"],[]]},{"id":"f0f59cf624abd81b","type":"api-call-service","z":"2491b5ee305ab8a7","name":"3.a Nachricht an Telegram senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"telegram_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.message }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":80,"wires":[[]]},{"id":"578351d7944f6f1b","type":"api-call-service","z":"2491b5ee305ab8a7","name":"3.c Nachricht an Dashboard senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.message }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":240,"wires":[[]]},{"id":"ae79a1f241cf8dc8","type":"api-call-service","z":"2491b5ee305ab8a7","name":"3.b Nachricht an HA-App senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_galaxy_von_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.message }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":160,"wires":[[]]},{"id":"62569783f79230c4","type":"function","z":"2491b5ee305ab8a7","name":"2. Warnungen auslesen und Nachricht zusammenbauen","func":"// ----------------------------------------------------------------------------\n// DWD-Warnungen - NodeRED-Funktion\n// Version: 1.10\n// Datum: 10.04.2023\n// Quelle: https://github.com/migacode/home-assistant\n// ----------------------------------------------------------------------------\n// Initialisierung\n// ----------------------------------------------------------------------------\n// Entitäten der DWD-Sensoren (vollständige Namen)\nvar dwd_entity_name_cw = 'sensor.dwd_warnungen_hoerstel_current_warning_level';\nvar dwd_entity_name_aw = 'sensor.dwd_warnungen_hoerstel_advance_warning_level';\n// ----------------------------------------------------------------------------\n// Alten Payload löschen um keine Daten daraus mit weiterzuleiten\nmsg.payload = [];\n// Status aller Home Assistant Entitäten einlesen\nvar global_states = global.get('homeassistant.homeAssistant.states');\n// Daten der beiden DWD-Sensoren extrahieren\nvar entity_current_data = global_states[dwd_entity_name_cw];\nvar entity_advance_data = global_states[dwd_entity_name_aw];\n// ----------------------------------------------------------------------------\n// \"Aktuelle\" Warnmeldungen verarbeiten\n// ----------------------------------------------------------------------------\n// Anzahl der vorhandenen Warnmeldungen ermitteln\nvar number_of_current_warnings = entity_current_data.attributes.warning_count;\n// Wenn es Warnmeldungen gibt, Nachricht(en) dazu erstellen\nif (number_of_current_warnings > 0) {\n  for (var i = 1; i <= number_of_current_warnings; i++) {\n    // Neue leere Nachricht erzeugen\n    var currentMsg = {};\n    // Nachricht aus den einzelnen Warnmeldungs-Komponenten zusammenbauen\n    currentMsg.payload = {\n      message: \"*DWD-WARNUNG!* (über Node-RED)\\n\\n\" +\n        entity_current_data.attributes['warning_' + i + '_headline'] + \"\\n\" +\n        \"Aktuelle Warnstufe: \" + entity_current_data.attributes['warning_' + i + '_level'] + \"\\n\" +\n        entity_current_data.attributes['warning_' + i + '_description'] + \"\\n\" +\n        \"Von \" + time_convert(entity_current_data.attributes['warning_' + i + '_start']) + \" Uhr \" +\n        \"bis \" + time_convert(entity_current_data.attributes['warning_' + i + '_end']) + \" Uhr.\"\n    }\n    // Fertige Nachricht als Payload (Message) an folgende/n Node/s senden\n    node.send(currentMsg);\n  }\n}\n// ----------------------------------------------------------------------------\n// \"Erweiterte\" Warnmeldungen verarbeiten\n// ----------------------------------------------------------------------------\n// Anzahl der vorhandenen Warnmeldungen ermitteln\nvar number_of_advance_warnings = entity_advance_data.attributes.warning_count;\n// Wenn es Warnungen gibt, Nachricht(en) dazu erstellen\nif (number_of_advance_warnings > 0) {\n  for (var i = 1; i <= number_of_advance_warnings; i++) {\n    // Neue leere Nachricht erzeugen\n    var advanceMsg = {};\n    // Nachricht aus den einzelnen Warnmeldungs-Komponenten zusammenbauen\n    advanceMsg.payload = {\n      message: \"*DWD-WARNUNG!* (über Node-RED)\\n\\n\" +\n        entity_advance_data.attributes['warning_' + i + '_headline'] + \"\\n\" +\n        \"Erweiterte Warnstufe: \" + entity_advance_data.attributes['warning_' + i + '_level'] + \"\\n\" +\n        entity_advance_data.attributes['warning_' + i + '_description'] + \"\\n\" +\n        \"Von \" + time_convert(entity_advance_data.attributes['warning_' + i + '_start']) + \" Uhr \" +\n        \"bis \" + time_convert(entity_advance_data.attributes['warning_' + i + '_end']) + \" Uhr.\"\n    }\n    // Fertige Nachricht als Payload (Message) an folgende/n Node/s senden\n    node.send(advanceMsg);\n  }\n}\n// ----------------------------------------------------------------------------\n// Funktions-Node OHNE Rückmeldung beenden, da bereits Daten gesendet wurden\n// ----------------------------------------------------------------------------\nreturn null;\n// ----------------------------------------------------------------------------\n// Funktion zur Umwandlung einer ISO-Zeitangabe in ein eigenes Format\n// ----------------------------------------------------------------------------\nfunction time_convert(iso_string) {\n  var date = new Date(iso_string);\n  var year = parseInt(date.getFullYear());\n  var month = parseInt(date.getMonth()) + 1;\n  var day = parseInt(date.getDate());\n  var hour = parseInt(date.getHours());\n  var minute = parseInt(date.getMinutes());\n  if (day < 10) { day = '0' + day; }\n  if (month < 10) { month = '0' + month; }\n  if (hour < 10) { hour = '0' + hour; }\n  if (minute < 10) { minute = '0' + minute; }\n  return day + '.' + month + '.' + year + ' um ' + hour + ':' + minute;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":160,"wires":[["578351d7944f6f1b","f0f59cf624abd81b","ae79a1f241cf8dc8"]]},{"id":"e5ff3427.b49de8","type":"server","name":"Home Assistant","addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"","connectionDelay":false,"cacheJson":false,"heartbeat":false,"heartbeatInterval":"","statusSeparator":"","enableGlobalContextStore":false}]