[{"id":"273985f1f1fc7893","type":"tab","label":"DWD 1.51","disabled":false,"info":"","env":[]},{"id":"5f6870a636a6a181","type":"server-state-changed","z":"273985f1f1fc7893","name":"1. DWD Warnungen triggern","server":"e5ff3427.b49de8","version":5,"outputs":1,"exposeAsEntityConfig":"","entityId":["sensor.dwd_warnungen_hoerstel_advance_warning_level","sensor.dwd_warnungen_hoerstel_current_warning_level"],"entityIdType":"list","outputInitially":false,"stateType":"str","ifState":"","ifStateType":"str","ifStateOperator":"is_not","outputOnlyOnStateChange":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"trigger_id","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"current_warnings","propertyType":"msg","value":"{\"daten\":$entities(\"sensor.dwd_warnungen_hoerstel_current_warning_level\")}","valueType":"jsonata"},{"property":"advance_warnings","propertyType":"msg","value":"{\"daten\":$entities(\"sensor.dwd_warnungen_hoerstel_advance_warning_level\")}","valueType":"jsonata"}],"x":180,"y":120,"wires":[["ad04c4140841668e"]]},{"id":"fe222a5e8c688ba1","type":"api-call-service","z":"273985f1f1fc7893","name":"3.a Nachricht an Telegram senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"telegram_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.msg_full }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":120,"wires":[[]]},{"id":"744afebf0f60c8ca","type":"api-call-service","z":"273985f1f1fc7893","name":"3.c Nachricht an Dashboard senden (JSONata)","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.msg_full, '***', '**') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":780,"y":280,"wires":[[]]},{"id":"9c9b0e868e2e60c7","type":"api-call-service","z":"273985f1f1fc7893","name":"3.b Nachricht an HA-App senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_galaxy_von_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.msg_short, '***', '') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":200,"wires":[[]]},{"id":"ad04c4140841668e","type":"function","z":"273985f1f1fc7893","name":"2. Warnungen auslesen und Nachricht zusammenbauen","func":"// ============================================================================\n// DWD-Warnungen versenden - NodeRED-Funktionsblock\n// Version: 1.51\n// Datum:   14.04.2023\n// Quelle:  https://github.com/migacode/home-assistant\n// ============================================================================\n// Konfiguration\n// * = Nur bei Ausgang 1, auf Ausgang 2 werden immer alle Warnungen gesendet\n// ============================================================================\n// Kleinste Warnstufe, ab der Mitteilungen versendet werden (1 = alle)*\nvar minimum_warning_level     = 1;\n// Doppelte Warnungen unterdrücken (true | false)*\nvar suppress_double_warnings  = true;\n// Wetter-Symbole anzeigen (true | false)\nvar show_weather_symbols      = true;\n// Mitteilung versenden, wenn alle Meldungen aufgehoben wurden (true | false)\nvar send_cancellation_message = true;\n// Im Mitteilungstext \"Amtliche Warnung vor \" entfernen (true | false)\nvar remove_pre_text_amtliche  = true;\n// Zusätzlicher Text, der hinter der Haupt-Überschrift angezeigt wird\nvar main_headline_add_text    = '(über Node-RED)';\n// ============================================================================\n// Gesendete Daten des vorherigen Node einlesen\n// ============================================================================\nvar triggering_entity   = msg.trigger_id;       // Triggernde Entität\nvar entity_current_data = msg.current_warnings; // Daten zu Aktuelle Warnstufe\nvar entity_advance_data = msg.advance_warnings; // Daten zu Vorwarnstufe\n// ============================================================================\n// Initialisierung\n// ============================================================================\n// ----------------------------------------------------------------------------\n// Anzahl der vorhandenen Warnmeldungen ermitteln\n// ----------------------------------------------------------------------------\nvar number_of_current_warnings = parseInt(entity_current_data.daten.attributes.warning_count);\nvar number_of_advance_warnings = parseInt(entity_advance_data.daten.attributes.warning_count);\nvar number_of_active_warnings  = number_of_current_warnings + number_of_advance_warnings;\n// ----------------------------------------------------------------------------\n// Wetter-Symbole definieren\n// ACHTUNG: Die Position der Schlüsselwörter in weather_warnidx entspricht der\n//          jeweiligen Position des entsprechenden Symbols in weather_symbols!\n// ----------------------------------------------------------------------------\nvar weather_warnidx  = ['EIS', 'FROST', 'GEWITTER', 'HAGEL', 'HITZE', 'KALT', 'KÄLTE', 'ORKAN', 'REGEN', 'SCHNEE', 'STURM', 'WASSER', 'WIND'];\nvar weather_symbols  = ['❄️', '❄️', '🌩', '🌩', '☀️', '❄️', '❄️', '🌪', '☂️', '⛄️', '🌪', '🌊', '💨'];\nvar blitz            = '⚡️ ';\n// ----------------------------------------------------------------------------\n// Textbausteine definieren\n// ----------------------------------------------------------------------------\nvar trennlinie       = '\\n───\\n';    // Trennlinie für Mitteilungen in vollen Meldungen\nvar trennstrich      = ' | ';        // Trennzeichen für Werte in reinen Text-Meldungen\nvar ende_marker      = ' |!| ';      // Trennzeichen für Warnungen in reinen Text-Meldungen\nvar double_warn_flag = \"(Doppelt) \"; // Hinweis für doppelte/redundante Warnmeldungen\n// Haupt-Überschrift der Mitteilung, (CCC) wird später automatisch ersetzt\nvar ueberschrift     = \"DWD-WARNUNG\" + ((number_of_active_warnings > 1) ? 'EN (CCC)' : '');\n// ----------------------------------------------------------------------------\n// Intern verwendete Variablen initialisieren\n// (NICHT ändern, Änderungen erfolgen zur Laufzeit nur durch das Skript selbst)\n// ----------------------------------------------------------------------------\n// Warnungen\nvar warnings_to_show = 0;     // Anzahl Meldungen größer/gleich Mindest-Warnstufe\nvar warning_type     = '';    // Text für Art der Warnung (Aktuell oder Vorwarnung)\nvar work_warning_id  = '';    // Interne ID zur Identifikation doppelter Warnungen\nvar warnings_id_list = '';    // Liste mit IDs bereits angezeigter Warnungen\nvar warning_exists   = false; // Warnung existiert in der Liste bekannter Warnungen\nvar warn_list_type   = null;  // Datentyp der eingelesenen Liste\n\n// Texte für Ausgang 1\nvar full_message_1   = '';    // Volle Meldung mit Sonderzeichen (Wettersymbole etc.)\nvar short_message_1  = '';    // Gekürzte Meldung mit Sonderzeichen (max 256 Zeichen)\nvar text_message_1   = '';    // Volle Meldung als reiner Text ohne Sonderzeichen\n// Texte für Ausgang 2\nvar full_message_2   = '';    // Volle Meldung mit Sonderzeichen (Wettersymbole etc.)\nvar short_message_2  = '';    // Gekürzte Meldung mit Sonderzeichen (max 256 Zeichen)\nvar text_message_2   = '';    // Volle Meldung als reiner Text ohne Sonderzeichen\n// Sonstige\nvar entity_data      = [];    // Arbeits-Kopie der jeweiligen Entitäts-Daten\n\n// ============================================================================\n// Here we go ...\n// ============================================================================\nif (number_of_active_warnings > 0)\n{\n  // --------------------------------------------------------------------------\n  // Haupt-Überschrift der Mitteilung(en)\n  // --------------------------------------------------------------------------\n  if (!show_weather_symbols) { blitz = ''; }\n  full_message_1  = blitz + \"***\" + ueberschrift + \"*** \" + blitz + main_headline_add_text + trennlinie;\n  full_message_2  = full_message_1;\n  short_message_1 = full_message_1;\n  short_message_2 = short_message_1;\n  text_message_1  = ueberschrift + \" \" + main_headline_add_text + trennstrich;\n  text_message_2  = text_message_1;\n  // --------------------------------------------------------------------------\n  // Warnmeldungen verarbeiten und der Mitteilung hinzufügen\n  // ---------------------------------------------------------------------------\n  // 1. Aktuelle Warnungen\n  // ----------------------\n  if (number_of_current_warnings > 0)\n  {\n    entity_data = entity_current_data;\n    warning_type = 'Aktuelle Warnstufe: ';\n    add_warnings(number_of_current_warnings);\n  }\n  // ----------------\n  // 2. Vorwarnungen\n  // ----------------\n  if (number_of_advance_warnings > 0)\n  {\n    entity_data = entity_advance_data;\n    warning_type = 'Vorwarnstufe: ';\n    add_warnings(number_of_advance_warnings);\n  }\n}\nelse\n{\n  // --------------------------------------------------------------------------\n  // Wenn keine Warnungen mehr vorhanden sind, entsprechenden Hinweis senden,\n  // sofern dies nicht mit \"send_cancellation_message = false\" abgestellt ist\n  // --------------------------------------------------------------------------\n  if (send_cancellation_message)\n  {\n    // -----------------------------------------------------------------------\n    // Um mehrfache Mitteilungen durch Löschen aller DWD-Warnmeldungen zu\n    // verhindern, nur senden wenn die Letzte schon 10 Minuten her ist\n    // -----------------------------------------------------------------------\n    var minimum_time_diff = 600; // 600 Sekunden = 10 Minuten\n    var time_saved = global.get(\"dwd_last_cancellation_time\");\n    var t_time_saved = typeof time_saved;\n    if (time_saved == '' || t_time_saved === 'undefined' || time_saved === null || t_time_saved === null)\n    {\n      time_saved = Date.now();\n      time_saved = time_saved - minimum_time_diff;\n    }\n    var time_now = Date.now();\n    global.set(\"dwd_last_cancellation_time\", time_now);\n    time_saved = Math.round(time_saved / 1000);\n    time_now   = Math.round(time_now / 1000);\n    var cancellation_message = \"\";\n    if ((time_now - time_saved) >= minimum_time_diff)\n    {\n      warnings_to_show = 1;\n      cancellation_message = \"Alle DWD-Warnmeldungen wurden aufgehoben.\";\n    }\n    // ---------------------------------------------------------\n    // Alle Mitteilungstexte mit entsprechendm Hinweis befüllen\n    // ---------------------------------------------------------\n    full_message_1  = cancellation_message;\n    full_message_2  = cancellation_message;\n    short_message_1 = cancellation_message;\n    short_message_2 = cancellation_message;\n    text_message_1  = cancellation_message;\n    text_message_2  = cancellation_message;\n    // ---------------------------------------------------\n    // Wenn es keine Warnungen mehr gibt, dann auch die\n    // gespeicherte Liste der bekannten Warnungen löschen\n    // ---------------------------------------------------\n    global.set(\"dwd_nodered_warnings_list\", '');\n  }\n}\n// ----------------------------------------------------------------------------\n// Mitteilung zum Versand als Payload vorbereiten\n// ----------------------------------------------------------------------------\n// Anzahl der tatsächlich angezeigten Meldungen in den Mitteilungen einfügen\n// --------------------------------------------------------------------------\nfull_message_1 = full_message_1.replace('CCC', warnings_to_show.toString());\nfull_message_2 = full_message_2.replace('CCC', number_of_active_warnings.toString());\nshort_message_1 = short_message_1.replace('CCC', warnings_to_show.toString());\nshort_message_2 = short_message_2.replace('CCC', number_of_active_warnings.toString());\ntext_message_1 = text_message_1.replace('CCC', warnings_to_show.toString());\ntext_message_2 = text_message_2.replace('CCC', number_of_active_warnings.toString());\n// --------------------------------\n// Daten für Ausgang 1 vorbereiten\n// --------------------------------\nvar output_1 = {};\noutput_1.payload = {\n  msg_full: full_message_1,\n  msg_short: short_message_1,\n  msg_text: text_message_1\n}\n// --------------------------------\n// Daten für Ausgang 2 vorbereiten\n// --------------------------------\nvar output_2 = {};\noutput_2.payload = {\n  msg_full: full_message_2,\n  msg_short: short_message_2,\n  msg_text: text_message_2\n}\n// ----------------------------------------------------------------------------\n// Mitteilung ausgeben (an nachfolgende/n Node/s senden)\n// ----------------------------------------------------------------------------\n// Alten Payload löschen, um keine Daten daraus mit weiterzuleiten\n// ----------------------------------------------------------------\nmsg.payload = [];\n// ----------------------------------------------------------------------\n// Wenn es neue Mitteilungen gibt, Daten an Ausgang 1 und 2 ausgeben ...\n// ----------------------------------------------------------------------\nif (warnings_to_show > 0)\n{\n  // Nur wenn es auch wirklich etwas zu melden gibt ...\n  if (full_message_1 != \"\" || short_message_1 != \"\" || text_message_1 != \"\")\n  {\n    node.send([output_1, output_2]); // asynchron\n    node.done();\n    // return [output_1, output_2]; // synchron\n  }\n}\n// ----------------------------------------------------------------------\n// ... sonst Daten nur an Ausgang 2 ausgeben\n// ----------------------------------------------------------------------\nelse\n{\n  // Nur wenn es auch wirklich etwas zu melden gibt ...\n  if (full_message_2 != \"\" || short_message_2 != \"\" || text_message_2 != \"\")\n  {\n    node.send([null, output_2]); // asynchron\n    node.done();\n    // return [null, output_2]; // synchron\n  }\n}\n// ----------------------------------------------------------------------------\n// Skript OHNE Rückmeldung beenden (Daten wurden schon mit node.send gesendet)\n// ----------------------------------------------------------------------------\nreturn null;\n\n// ============================================================================\n// Umwandlung einer ISO-Zeitangabe in ein eigenes Format\n// ============================================================================\nfunction time_convert(iso_string) {\n  var date = new Date(iso_string);\n  var year = parseInt(date.getFullYear());\n  var month = parseInt(date.getMonth()) + 1;\n  var day = parseInt(date.getDate());\n  var hour = parseInt(date.getHours());\n  var minute = parseInt(date.getMinutes());\n  if (day < 10) { day = '0' + day; }\n  if (month < 10) { month = '0' + month; }\n  if (hour < 10) { hour = '0' + hour; }\n  if (minute < 10) { minute = '0' + minute; }\n  return '***' + day + '.' + month + '.' + year + '*** um ***' + hour + ':' + minute + '***';\n}\n\n// ============================================================================\n// Einfache Prüfsumme erstellen\n// ============================================================================\nfunction get_cs(the_text)\n{\n  var the_text = the_text.toString();\n  var cs_value = 0;\n  for (var i=0;i<the_text.length;i++)\n  {\n    cs_value = cs_value + the_text.charCodeAt(i);\n  }\n  return cs_value;\n}\n\n// ============================================================================\n// Hinzufügen der Warnmeldungen zu den zu versendenden Mitteilungen\n// ============================================================================\nfunction add_warnings(number_of_warnings) {\n  var level          = 0;  // Warnstufe\n  // var level_text     = ''; // Warnstufe als Text\n  var headline       = ''; // Kopfzeile\n  var weather_symbol = ''; // Wetter-Symbol\n  var description    = ''; // Beschreibung\n  var time_start     = ''; // Beginn\n  var time_end       = ''; // Ende\n  var time_text      = ''; // Zeitangabe in lesbarem Text\n  var work_full_msg  = ''; // Arbeitsbereich für Vollständige Meldung\n  var work_short_msg = ''; // Arbeitsbereich für Kurzmeldung\n  var work_text_msg  = ''; // Arbeitsbereich für reine Text-Meldung\n  var anzahl = parseInt(number_of_warnings);\n  if (anzahl > 0)\n  {\n    for (var i = 1; i <= anzahl; i++)\n    {\n      // ----------------------------------------------------\n      // Bei jeder Warnung mit leeren Arbeitstexten beginnen\n      // ----------------------------------------------------\n      work_full_msg  = '';\n      work_short_msg = '';\n      work_text_msg  = '';\n      // ----------------------\n      // 1. Warnstufe auslesen\n      // ----------------------\n      level = parseInt(entity_data.daten.attributes['warning_' + i + '_level']);\n      // -------------------------------------------------------------------\n      // Meldung nur hinzufügen wenn diese definiert ist (einen Inhalt hat)\n      // -------------------------------------------------------------------\n      if (typeof level !== 'undefined')\n      {\n        // -----------------------------------\n        // 2.a Kopfzeile der Meldung auslesen\n        // -----------------------------------\n        headline = entity_data.daten.attributes['warning_' + i + '_headline'];\n        // -------------------------------------------\n        // 2.b Wetter-Symbole zur Kopfzeile ermitteln\n        // -------------------------------------------\n        weather_symbol = '';\n        if (show_weather_symbols)\n        {\n          for (var w = 0; w < weather_warnidx.length; w++)\n          {\n            if (headline.toUpperCase().indexOf(weather_warnidx[w]) !== -1) { weather_symbol += weather_symbols[w]; }\n          }\n        }\n        // -------------------------------------\n        // 3. Beschreibung der Meldung auslesen\n        // -------------------------------------\n        description = entity_data.daten.attributes['warning_' + i + '_description'];\n        // -------------------------------\n        // 4. Zeiten der Meldung auslesen\n        // -------------------------------\n        time_start = time_convert(entity_data.daten.attributes['warning_' + i + '_start']);\n        time_end = time_convert(entity_data.daten.attributes['warning_' + i + '_end']);\n        time_text = \"Von \" + time_start + \" Uhr bis \" + time_end + \" Uhr.\";\n        // --------------------------------------------------------------------\n        // Nachrichten aus den einzelnen Warnmeldungs-Komponenten zusammenbauen\n        // --------------------------------------------------------------------\n        // Vollständige Meldung\n        // ---------------------\n        work_full_msg += \"***\" + headline + \"*** \" + weather_symbol + \"\\n\" +\n        warning_type + \"***\" + level + \"***\\n\" +\n        description + \"\\n\" +\n        time_text + trennlinie;\n        // ------------\n        // Kurzmeldung\n        // ------------\n        work_short_msg += headline + \" \" + weather_symbol + \"\\n\" + time_text + trennlinie;\n        work_short_msg = work_short_msg.replace(/ Uhr /g, ' ');\n        work_short_msg = work_short_msg.replace(/ um /g, ' ');\n        // -------------------\n        // Reine Text-Meldung\n        // -------------------\n        work_text_msg += headline + trennstrich +\n        warning_type + level + trennstrich +\n        description + trennstrich +\n        time_text + ende_marker;\n        // -----------------\n        // Texte bereinigen\n        // -----------------\n        if (remove_pre_text_amtliche)\n        {\n          work_full_msg = work_full_msg.replace(/Amtliche Warnung vor /gis, '');\n          work_short_msg = work_short_msg.replace(/Amtliche Warnung vor /gis, '');\n          work_text_msg = work_text_msg.replace(/Amtliche Warnung vor /gis, '');\n        }\n        work_short_msg = work_short_msg.substring(0, 255) + \" (Details siehe HA-App)\" + trennlinie;\n        work_text_msg = work_text_msg.replace(/\\*\\*\\*/gis, '');\n        // -----------------------------------------------------------------\n        // Wenn doppelte Warnungen unterdrückt werden sollen, prüfen ob die\n        // Warnung schon in der Liste bekannter Warnungen enthalten ist\n        // -----------------------------------------------------------------\n        warning_exists = false;\n        if (suppress_double_warnings)\n        {\n          // ----------------------------------------------------------\n          // ID für die Warnung erstellen\n          // ----------------------------------------------------------\n          work_warning_id = headline.charAt(0).toString() +\n                          description.charAt(0).toString() +\n                          get_cs(work_text_msg).toString();\n          // ----------------------------------------------------------\n          // Wenn es schon eine Liste mit bekannten Warnungen gibt,\n          // ermitteln ob die neue Warnung darin bereits enthalten ist\n          // ----------------------------------------------------------\n          warnings_id_list = global.get(\"dwd_nodered_warnings_list\");\n          warn_list_type = typeof warnings_id_list;\n          if (warnings_id_list != '' && warn_list_type !== 'undefined' && warnings_id_list !== null && warn_list_type !== null)\n          {\n            if (warnings_id_list.indexOf(work_warning_id + ',') >= 0)\n            {\n              warning_exists = true;\n            }\n          }\n          else\n          {\n            warnings_id_list = '';\n          }\n          // -----------------------------------------------------\n          // Wenn es die Warnung noch nicht gibt, diese der Liste\n          // bekannter Warnungen hinzufügen und Liste speichern\n          // -----------------------------------------------------\n          if (!warning_exists)\n          {\n            warnings_id_list += work_warning_id + ',';\n            global.set(\"dwd_nodered_warnings_list\", warnings_id_list);\n          }\n        }\n        // ----------------------------------\n        // Redundante Warnungen kennzeichnen\n        // ----------------------------------\n        if (warning_exists)\n        {\n          work_full_msg  = double_warn_flag + work_full_msg;\n          work_short_msg = double_warn_flag + work_short_msg;\n          work_text_msg  = double_warn_flag + work_text_msg;\n        }\n        // -----------------------------------------------------------------\n        // Warnmeldung für Ausgang 1 nur hinzufügen, wenn diese größer oder\n        // gleich der Mindest-Warnstufe ist und noch nicht existiert\n        // -----------------------------------------------------------------\n        if (level >= minimum_warning_level && !warning_exists)\n        {\n          warnings_to_show++;\n          full_message_1  += work_full_msg;\n          short_message_1 += work_short_msg;\n          text_message_1  += work_text_msg;\n        }\n        // ---------------------------------------------\n        // Warnmeldungen für Ausgang 2 immer hinzufügen\n        // ---------------------------------------------\n        full_message_2  += work_full_msg;\n        short_message_2 += work_short_msg;\n        text_message_2  += work_text_msg;\n      }\n    }\n  }\n  return;\n}\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":200,"wires":[["2ab817988e60f76d","9c9b0e868e2e60c7","fe222a5e8c688ba1"],["744afebf0f60c8ca","619256b4fdd1e388","95de83b069af1c8e"]]},{"id":"4c0d1cad9135cb0c","type":"comment","z":"273985f1f1fc7893","name":"DWD-Warnungen 1.51","info":"","x":160,"y":60,"wires":[]},{"id":"2ab817988e60f76d","type":"debug","z":"273985f1f1fc7893","d":true,"name":"Ausgang 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":60,"wires":[]},{"id":"619256b4fdd1e388","type":"debug","z":"273985f1f1fc7893","d":true,"name":"Ausgang 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":420,"wires":[]},{"id":"95de83b069af1c8e","type":"api-call-service","z":"273985f1f1fc7893","d":true,"name":"3.d Nachricht an Dashboard senden (JSON)","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{\"message\":\"{{payload.msg_text}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":750,"y":360,"wires":[[]]},{"id":"d9552beb05658602","type":"inject","z":"273985f1f1fc7893","name":"Reset","props":[{"p":"zahl","v":"","vt":"num"},{"p":"text","v":"","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":130,"y":480,"wires":[["306ff4810b1a358c"]]},{"id":"306ff4810b1a358c","type":"function","z":"273985f1f1fc7893","name":"Liste alter DWD-Warnungen löschen","func":"global.set(\"dwd_nodered_warnings_list\", '');\nmsg.payload = [];\nvar output = {};\noutput.payload = {\n  meldung: \"Liste der alten DWD-Warnmeldungen gelöscht.\"\n}\nnode.send(output);\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":480,"wires":[["dc9cd73200b5fedc"]]},{"id":"dc9cd73200b5fedc","type":"debug","z":"273985f1f1fc7893","name":"Bestätigung","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":480,"wires":[]},{"id":"e5ff3427.b49de8","type":"server","name":"Home Assistant","addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"","connectionDelay":false,"cacheJson":false,"heartbeat":false,"heartbeatInterval":"","statusSeparator":"","enableGlobalContextStore":false}]