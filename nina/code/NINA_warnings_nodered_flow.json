[{"id":"b6fbc92e62876ea3","type":"function","z":"8cc01e04f6f8fe59","name":"2. Warnungen auslesen und Nachricht zusammenbauen","func":"// ----------------------------------------------------------------------------\n// NINA-Warnungen - NodeRED-Funktion\n// Version: 1.15\n// Datum: 15.04.2023\n// Quelle: https://github.com/migacode/home-assistant\n// ----------------------------------------------------------------------------\n// Initialisierung\n// ----------------------------------------------------------------------------\n// Entitäten der NINA-Sensoren (Name OHNE Nummer aber mit Unterstrich am Ende)\nvar nina_entity_name = 'binary_sensor.nina_warning_hoerstel_';\n// ----------------------------------------------------------------------------\n// Alten Payload löschen um keine Daten daraus mit weiterzuleiten\nmsg.payload = [];\n// Symbole und Textbausteine definieren\nvar weather_warnidx = ['EIS', 'FROST', 'GEWITTER', 'HAGEL', 'HITZE', 'KALT', 'KÄLTE', 'ORKAN', 'REGEN', 'SCHNEE', 'STURM', 'WASSER', 'WIND'];\nvar weather_symbols = ['❄️', '❄️', '🌩', '🌩', '☀️', '❄️', '❄️', '🌪', '☂️', '⛄️', '🌪', '🌊', '💨'];\nvar blitz = '⚡️';\nvar trennlinie = '\\n───\\n';\n// Status aller Home Assistant Entitäten einlesen\nvar global_states = global.get('homeassistant.homeAssistant.states');\n// Anzahl beobachteter NINA-Warnungen\nvar number_of_nina_warnings = 5;\n// Anzahl der vorhandenen Warnmeldungen ermitteln\nvar number_of_active_warnings = 0;\nfor (var i = 1; i <= number_of_nina_warnings; i++)\n{\n  var entity_current_data = global_states[nina_entity_name + i];\n  if (entity_current_data.state == 'on') { number_of_active_warnings++; }\n}\n// Nur weitermachen, wenn es Warnmeldungen gibt\nif (number_of_active_warnings > 0)\n{\n  var full_message = blitz + \" ***NINA-WARNUNG\" + ((number_of_active_warnings > 1) ? 'EN (' + number_of_active_warnings + ')' : '') + \"*** \" + blitz + \" (über Node-RED)\" + trennlinie;\n  var short_message = full_message;\n  for (var i = 1; i <= number_of_nina_warnings; i++)\n  {\n    // Daten des NINA-Sensors extrahieren\n    var entity_current_data = global_states[nina_entity_name + i];\n    // Wenn die Warnung aktiv ist, dann Nachricht erstellen\n    if (entity_current_data.state == 'on')\n    {\n      var headline = entity_current_data.attributes.headline;\n      // Warnstufen übersetzen\n      var level = entity_current_data.attributes.severity;\n      level = level.replace('Minor', 'Gering').replace('Moderate', 'Mäßig').replace('Severe', 'Schwer').replace('Extreme', 'Extrem');\n      // Wetter-Symbole zur Kopfzeile ermitteln\n      var weather_symbol = '';\n      for (var w = 0; w < weather_warnidx.length; w++) {\n        if (headline.toUpperCase().indexOf(weather_warnidx[w]) !== -1) { weather_symbol += weather_symbols[w]; }\n      }\n      // Zeiten auslesen\n      var time_start = time_convert(entity_current_data.attributes.start);\n      var time_end = time_convert(entity_current_data.attributes.expires);\n      // Nachrichten aus den einzelnen Warnmeldungs-Komponenten zusammenbauen und hinzufügen\n      short_message += headline + \" \" + weather_symbol + \"\\n\" + time_start + \" bis \" + time_end + trennlinie;\n      full_message += \"***\" + headline + \"*** \" + weather_symbol + \"\\n\" +\n      \"Warnstufe: ***\" + level + \"***\\n\" +\n      entity_current_data.attributes.description + \"\\n\" +\n      \"Von \" + time_start + \" Uhr bis \" + time_end + \" Uhr.\" + trennlinie;\n    }\n  }\n  // Fertige Nachrichten als Payload an folgende/n Node/s senden\n  var newMsg = {};\n  newMsg.payload = {\n    message: full_message,\n    appmsg: short_message.substring(0, 320) + \"\\n(Details siehe HA-App)\"\n  }\n  node.send(newMsg);\n}\n// ----------------------------------------------------------------------------\n// Funktions-Node OHNE Rückmeldung beenden, da bereits Daten gesendet wurden\n// ----------------------------------------------------------------------------\nreturn null;\n// ----------------------------------------------------------------------------\n// Funktion zur Umwandlung einer ISO-Zeitangabe in ein eigenes Format\n// ----------------------------------------------------------------------------\nfunction time_convert(iso_string) {\n  var date = new Date(iso_string);\n  var year = parseInt(date.getFullYear());\n  var month = parseInt(date.getMonth()) + 1;\n  var day = parseInt(date.getDate());\n  var hour = parseInt(date.getHours());\n  var minute = parseInt(date.getMinutes());\n  if (day < 10) { day = '0' + day; }\n  if (month < 10) { month = '0' + month; }\n  if (hour < 10) { hour = '0' + hour; }\n  if (minute < 10) { minute = '0' + minute; }\n  return '***' + day + '.' + month + '.' + year + '*** um ***' + hour + ':' + minute + '***';\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":160,"wires":[["30ed52e22b0b9ef0","1601e05ce232e215","63cd029e5bebe504"]]},{"id":"bbb22bbd1d719551","type":"server-state-changed","z":"8cc01e04f6f8fe59","name":"1. NINA Warnungen triggern","server":"e5ff3427.b49de8","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":["binary_sensor.nina_warning_hoerstel_1","binary_sensor.nina_warning_hoerstel_2","binary_sensor.nina_warning_hoerstel_3","binary_sensor.nina_warning_hoerstel_4","binary_sensor.nina_warning_hoerstel_5"],"entityidfiltertype":"list","outputinitially":false,"state_type":"str","haltifstate":"on","halt_if_type":"str","halt_if_compare":"is","outputs":2,"output_only_on_state_change":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[],"x":180,"y":80,"wires":[["b6fbc92e62876ea3"],[]]},{"id":"63cd029e5bebe504","type":"api-call-service","z":"8cc01e04f6f8fe59","name":"3.a Nachricht an Telegram senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"telegram_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.message }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":80,"wires":[[]]},{"id":"30ed52e22b0b9ef0","type":"api-call-service","z":"8cc01e04f6f8fe59","name":"3.c Nachricht an Dashboard senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.message, '***', '**') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":240,"wires":[[]]},{"id":"1601e05ce232e215","type":"api-call-service","z":"8cc01e04f6f8fe59","name":"3.b Nachricht an HA-App senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_galaxy_von_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.appmsg, '***', '') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":160,"wires":[[]]},{"id":"e5ff3427.b49de8","type":"server","name":"Home Assistant","addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"","connectionDelay":false,"cacheJson":false,"heartbeat":false,"heartbeatInterval":"","statusSeparator":"","enableGlobalContextStore":false}]