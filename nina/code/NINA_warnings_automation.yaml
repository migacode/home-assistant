# =============================================================================
# NINA-Warnungen versenden - Home Assistant Automation
# -----------------------------------------------------------------------------
# Version: 1.18
# Datum:   18.04.2023
# Quelle:  https://github.com/migacode/home-assistant
# =============================================================================
- id: "nina_warnings"
  alias: NINA-Warnungen versenden
  description: ""
  variables:
    alert_message: "
{# ------------------------------------------------------------------- #}
{# Entit√§t der NINA-Sensoren (vollst√§ndiger Name OHNE Nummer am Ende)  #}
{# ------------------------------------------------------------------- #}
{% set nina_entity_name = 'binary_sensor.nina_warning_hoerstel_' %}
{# ------------------------------------------------------------------- #}
{%- set weather_warnidx = ['EIS', 'FROST', 'GEWITTER', 'HAGEL', 'HITZE', 'KALT', 'K√ÑLTE', 'ORKAN', 'REGEN', 'SCHNEE', 'STURM', 'WASSER', 'WIND'] %}
{%- set weather_symbols = ['‚ùÑÔ∏è', '‚ùÑÔ∏è', 'üå©', 'üå©', '‚òÄÔ∏è', '‚ùÑÔ∏è', '‚ùÑÔ∏è', 'üå™', '‚òÇÔ∏è', '‚õÑÔ∏è', 'üå™', 'üåä', 'üí®'] %}
{%- set blitz = '‚ö°' %}
{%- set trennlinie = '\n‚îÄ‚îÄ‚îÄ\n' %}
{%- set ns = namespace() %}{%- set ns.anzahl_meldungen = 0 %}{%- for i in range(5) %}{%- if is_state(nina_entity_name ~ loop.index, 'on') %}{%- set ns.anzahl_meldungen = ns.anzahl_meldungen + 1 %}{% endif %}{% endfor %}
{{blitz}} ***NINA-WARNUNG{% if ns.anzahl_meldungen > 1 %}EN ({{ ns.anzahl_meldungen }}){% endif %}*** {{blitz}} (√ºber HA){{trennlinie}}
{%- for i in range(5) %}{%- if is_state(nina_entity_name ~ loop.index, 'on') %}
{%- set headline = state_attr(nina_entity_name ~ loop.index, 'headline') %}***{{ headline | regex_replace('Amtliche Warnung vor ','',true) | trim }}***{{' '}}{% for item in weather_warnidx %}{% if item in headline.upper() %}{{ weather_symbols[loop.index0] | trim }}{% endif %}{% endfor %}{{'\n'}}{{'XXX'}}
{%- set level = state_attr(nina_entity_name ~ loop.index, 'severity') %}{{ 'Warnstufe: ' }}***{% if level == 'Extreme' %}Extrem{% elif level == 'Severe' %}Schwer{% elif level == 'Moderate' %}M√§√üig{% elif level == 'Minor' %}Gering{% else %}Hinweis{% endif %}***{{'\n'}}
{{- state_attr(nina_entity_name ~ loop.index, 'description') | trim }}{{'\n'}}{{'ZZZ'}}Von {{ state_attr(nina_entity_name ~ loop.index, 'start') | as_timestamp | timestamp_custom('***%d.%m.%Y*** um ***%H:%M*** Uhr', true) | trim }} bis {{ state_attr(nina_entity_name ~ loop.index, 'expires') | as_timestamp | timestamp_custom('***%d.%m.%Y*** um ***%H:%M*** Uhr', true) | trim }}.
{{trennlinie}}{% endif %}{% endfor %}"
  trigger:
    - platform: state
      entity_id: binary_sensor.nina_warning_hoerstel_1
      to: "on"
    - platform: state
      entity_id: binary_sensor.nina_warning_hoerstel_2
      to: "on"
    - platform: state
      entity_id: binary_sensor.nina_warning_hoerstel_3
      to: "on"
    - platform: state
      entity_id: binary_sensor.nina_warning_hoerstel_4
      to: "on"
    - platform: state
      entity_id: binary_sensor.nina_warning_hoerstel_5
      to: "on"
  action:
    - parallel:
      # Nachricht f√ºr Telegram formatieren und versenden
      - service: notify.telegram_michael
        continue_on_error: true
        data:
          message: "{{ alert_message | regex_replace('(XXX)|(ZZZ)','') | trim }}"
      # Nachricht f√ºr die HA-App formatieren, k√ºrzen und versenden
      - service: notify.mobile_app_galaxy_von_michael
        continue_on_error: true
        data:
          message: "{% set appmsg = alert_message | regex_replace('(XXX).+\n.+\n(ZZZ)','') | replace(' Uhr','') | replace(' um ',' ') | replace('***','') | trim %}{{ appmsg[0:255] ~ '\n(Details siehe HA-App)' }}"
          data:
            ledColor: "red"
      # Nachricht f√ºr das Dashboard formatieren und versenden
      - service: notify.persistent_notification
        continue_on_error: true
        data:
          message: "{{ alert_message | regex_replace('(XXX)|(ZZZ)','') | replace('***','**') | trim }}"
  mode: restart
