[{"id":"9a4bca9e1b62b3d8","type":"tab","label":"NINA 1.50","disabled":false,"info":"","env":[]},{"id":"2a616363f49a80dc","type":"function","z":"9a4bca9e1b62b3d8","name":"2. Warnungen auslesen und Nachricht zusammenbauen","func":"// ============================================================================\n// NINA-Warnungen versenden - NodeRED-Funktionsblock\n// Version: 1.50\n// Datum:   12.04.2023\n// Quelle:  https://github.com/migacode/home-assistant\n// ============================================================================\n// Konfiguration\n// * = Nur bei Ausgang 1, auf Ausgang 2 werden immer alle Warnungen gesendet\n// ============================================================================\n// Kleinste Warnstufe, ab der Mitteilungen versendet werden (1 = alle)*\nvar minimum_warning_level     = 1;\n// Doppelte Warnungen unterdr√ºcken (true | false)*\nvar suppress_double_warnings  = true;\n// Wetter-Symbole anzeigen (true | false)\nvar show_weather_symbols      = true;\n// Mitteilung versenden, wenn alle Meldungen aufgehoben wurden (true | false)\nvar send_cancellation_message = true;\n// Im Mitteilungstext \"Amtliche Warnung vor \" entfernen (true | false)\nvar remove_pre_text_amtliche  = true;\n// Zus√§tzlicher Text, der hinter der Haupt-√úberschrift angezeigt wird\nvar main_headline_add_text    = '(√ºber Node-RED)';\n// ============================================================================\n// Gesendete Daten des vorherigen Node einlesen\n// ============================================================================\nvar triggering_entity = msg.trigger_id; // Triggernde Entit√§t\nvar entity_data = [];\nentity_data[1]  = msg.warnung_1;        // Daten zu Warnung 1\nentity_data[2]  = msg.warnung_2;        // Daten zu Warnung 2\nentity_data[3]  = msg.warnung_3;        // Daten zu Warnung 3\nentity_data[4]  = msg.warnung_4;        // Daten zu Warnung 4\nentity_data[5]  = msg.warnung_5;        // Daten zu Warnung 5\n// ============================================================================\n// Initialisierung\n// ============================================================================\n// ----------------------------------------------------------------------------\n// Anzahl und Status der vorhandenen Warnmeldungen ermitteln\n// ----------------------------------------------------------------------------\nvar number_of_nina_warnings = 5;\nvar number_of_active_warnings = 0;\nvar warning_status = [];\nfor (var i = 1; i <= number_of_nina_warnings; i++)\n{\n  warning_status[i] = entity_data[i].daten.state;\n  if (warning_status[i] == 'on') {\n    number_of_active_warnings++; }\n}\n// ----------------------------------------------------------------------------\n// Wetter-Symbole definieren\n// ACHTUNG: Die Position der Schl√ºsselw√∂rter in weather_warnidx entspricht der\n//          jeweiligen Position des entsprechenden Symbols in weather_symbols!\n// ----------------------------------------------------------------------------\nvar weather_warnidx  = ['EIS', 'FROST', 'GEWITTER', 'HAGEL', 'HITZE', 'KALT', 'K√ÑLTE', 'ORKAN', 'REGEN', 'SCHNEE', 'STURM', 'WASSER', 'WIND'];\nvar weather_symbols  = ['‚ùÑÔ∏è', '‚ùÑÔ∏è', 'üå©', 'üå©', '‚òÄÔ∏è', '‚ùÑÔ∏è', '‚ùÑÔ∏è', 'üå™', '‚òÇÔ∏è', '‚õÑÔ∏è', 'üå™', 'üåä', 'üí®'];\nvar blitz            = '‚ö°Ô∏è ';\n// ----------------------------------------------------------------------------\n// Textbausteine definieren\n// ----------------------------------------------------------------------------\nvar trennlinie       = '\\n‚îÄ‚îÄ‚îÄ\\n';    // Trennlinie f√ºr Mitteilungen in vollen Meldungen\nvar trennstrich      = ' | ';        // Trennzeichen f√ºr Werte in reinen Text-Meldungen\nvar ende_marker      = ' |!| ';      // Trennzeichen f√ºr Warnungen in reinen Text-Meldungen\nvar double_warn_flag = \"(Doppelt) \"; // Hinweis f√ºr doppelte/redundante Warnmeldungen\n// Haupt-√úberschrift der Mitteilung, (CCC) wird sp√§ter automatisch ersetzt\nvar ueberschrift     = \"NINA-WARNUNG\" + ((number_of_active_warnings > 1) ? 'EN (CCC)' : '');\n// ----------------------------------------------------------------------------\n// Intern verwendete Variablen initialisieren\n// (NICHT √§ndern, √Ñnderungen erfolgen zur Laufzeit nur durch das Skript selbst)\n// ----------------------------------------------------------------------------\n// Warnungen\nvar warnings_to_show = 0;     // Anzahl Meldungen gr√∂√üer/gleich Mindest-Warnstufe\nvar warning_type     = '';    // Text f√ºr Art der Warnung (Aktuell oder Vorwarnung)\nvar work_warning_id  = '';    // Interne ID zur Identifikation doppelter Warnungen\nvar warnings_id_list = '';    // Liste mit IDs bereits angezeigter Warnungen\nvar warning_exists   = false; // Warnung existiert in der Liste bekannter Warnungen\nvar warn_list_type   = null;  // Datentyp der eingelesenen Liste\n\n// Texte f√ºr Ausgang 1\nvar full_message_1   = '';    // Volle Meldung mit Sonderzeichen (Wettersymbole etc.)\nvar short_message_1  = '';    // Gek√ºrzte Meldung mit Sonderzeichen (max 256 Zeichen)\nvar text_message_1   = '';    // Volle Meldung als reiner Text ohne Sonderzeichen\n// Texte f√ºr Ausgang 2\nvar full_message_2   = '';    // Volle Meldung mit Sonderzeichen (Wettersymbole etc.)\nvar short_message_2  = '';    // Gek√ºrzte Meldung mit Sonderzeichen (max 256 Zeichen)\nvar text_message_2   = '';    // Volle Meldung als reiner Text ohne Sonderzeichen\n\n// ============================================================================\n// Here we go ...\n// ============================================================================\nif (number_of_active_warnings > 0)\n{\n  // --------------------------------------------------------------------------\n  // Haupt-√úberschrift der Mitteilung(en)\n  // --------------------------------------------------------------------------\n  if (!show_weather_symbols) { blitz = ''; }\n  full_message_1  = blitz + \"***\" + ueberschrift + \"*** \" + blitz + main_headline_add_text + trennlinie;\n  full_message_2  = full_message_1;\n  short_message_1 = full_message_1;\n  short_message_2 = short_message_1;\n  text_message_1  = ueberschrift + \" \" + main_headline_add_text + trennstrich;\n  text_message_2  = text_message_1;\n  // ----------------------------------------------------------------------------\n  // Warnmeldungen verarbeiten und der Mitteilung hinzuf√ºgen\n  // ----------------------------------------------------------------------------\n  warning_type = 'Warnstufe: ';\n  add_warnings(number_of_nina_warnings);\n}\nelse\n{\n  // --------------------------------------------------------------------------\n  // Wenn keine Warnungen mehr vorhanden sind, entsprechenden Hinweis senden,\n  // sofern dies nicht mit \"send_cancellation_message = false\" abgestellt ist\n  // --------------------------------------------------------------------------\n  if (send_cancellation_message)\n  {\n    warnings_to_show = 1;\n    var cancellation_message = \"Alle NINA-Warnmeldungen wurden aufgehoben.\";\n    full_message_1  = cancellation_message;\n    full_message_2  = cancellation_message;\n    short_message_1 = cancellation_message;\n    short_message_2 = cancellation_message;\n    text_message_1  = cancellation_message;\n    text_message_2  = cancellation_message;\n    // ---------------------------------------------------------------\n    // Wenn es keine Warnungen mehr gibt, dann auch die\n    // gespeicherte Liste der bekannten Warnungen l√∂schen\n    // ---------------------------------------------------------------\n    global.set(\"nina_nodered_warnings_list\", '');\n  }\n}\n// ----------------------------------------------------------------------------\n// Mitteilung zum Versand als Payload vorbereiten\n// ----------------------------------------------------------------------------\n// Anzahl der tats√§chlich angezeigten Meldungen in den Mitteilungen einf√ºgen\n// --------------------------------------------------------------------------\nfull_message_1 = full_message_1.replace('CCC', warnings_to_show.toString());\nfull_message_2 = full_message_2.replace('CCC', number_of_active_warnings.toString());\nshort_message_1 = short_message_1.replace('CCC', warnings_to_show.toString());\nshort_message_2 = short_message_2.replace('CCC', number_of_active_warnings.toString());\ntext_message_1 = text_message_1.replace('CCC', warnings_to_show.toString());\ntext_message_2 = text_message_2.replace('CCC', number_of_active_warnings.toString());\n// --------------------------------\n// Daten f√ºr Ausgang 1 vorbereiten\n// --------------------------------\nvar output_1 = {};\noutput_1.payload = {\n  msg_full: full_message_1,\n  msg_short: short_message_1,\n  msg_text: text_message_1\n}\n// --------------------------------\n// Daten f√ºr Ausgang 2 vorbereiten\n// --------------------------------\nvar output_2 = {};\noutput_2.payload = {\n  msg_full: full_message_2,\n  msg_short: short_message_2,\n  msg_text: text_message_2\n}\n// ----------------------------------------------------------------------------\n// Mitteilung ausgeben (an nachfolgende/n Node/s senden)\n// ----------------------------------------------------------------------------\n// Alten Payload l√∂schen, um keine Daten daraus mit weiterzuleiten\n// ----------------------------------------------------------------\nmsg.payload = [];\n// --------------------------------------------------------------------------\n// Daten an Ausgang 1 nur ausgeben, wenn mindestens eine Mitteilung √ºber der\n// Mindest-Warnstufe existiert\n// --------------------------------------------------------------------------\nif (warnings_to_show > 0)\n{\n  node.send([output_1, output_2]); // asynchron\n  node.done();\n  // return [output_1, output_2]; // synchron\n}\nelse\n{\n  node.send([null, output_2]); // asynchron\n  node.done();\n  // return [null, output_2]; // synchron\n}\n// ----------------------------------------------------------------------------\n// Skript OHNE R√ºckmeldung beenden (Daten wurden schon mit node.send gesendet)\n// ----------------------------------------------------------------------------\nreturn null;\n\n// ============================================================================\n// Umwandlung einer ISO-Zeitangabe in ein eigenes Format\n// ============================================================================\nfunction time_convert(iso_string) {\n  var date = new Date(iso_string);\n  var year = parseInt(date.getFullYear());\n  var month = parseInt(date.getMonth()) + 1;\n  var day = parseInt(date.getDate());\n  var hour = parseInt(date.getHours());\n  var minute = parseInt(date.getMinutes());\n  if (day < 10) { day = '0' + day; }\n  if (month < 10) { month = '0' + month; }\n  if (hour < 10) { hour = '0' + hour; }\n  if (minute < 10) { minute = '0' + minute; }\n  return '***' + day + '.' + month + '.' + year + '*** um ***' + hour + ':' + minute + '***';\n}\n\n// ============================================================================\n// Einfache Pr√ºfsumme erstellen\n// ============================================================================\nfunction get_cs(the_text)\n{\n  var the_text = the_text.toString();\n  var cs_value = 0;\n  for (var i=0;i<the_text.length;i++)\n  {\n    cs_value = cs_value + the_text.charCodeAt(i);\n  }\n  return cs_value;\n}\n\n// ============================================================================\n// Hinzuf√ºgen der Warnmeldungen zu den zu versendenden Mitteilungen\n// ============================================================================\nfunction add_warnings(number_of_warnings) {\n  var level          = 0;  // Warnstufe als Zahl\n  var level_text     = ''; // Warnstufe als Text\n  var headline       = ''; // Kopfzeile\n  var weather_symbol = ''; // Wetter-Symbol\n  var description    = ''; // Beschreibung\n  var time_start     = ''; // Beginn\n  var time_end       = ''; // Ende\n  var time_text      = ''; // Zeitangabe in lesbarem Text\n  var work_full_msg  = ''; // Arbeitsbereich f√ºr Vollst√§ndige Meldung\n  var work_short_msg = ''; // Arbeitsbereich f√ºr Kurzmeldung\n  var work_text_msg  = ''; // Arbeitsbereich f√ºr reine Text-Meldung\n  var anzahl = parseInt(number_of_warnings);\n  if (anzahl > 0)\n  {\n    for (var i = 1; i <= anzahl; i++)\n    {\n      // ----------------------------------------------------\n      // Bei jeder Warnung mit leeren Arbeitstexten beginnen\n      // ----------------------------------------------------\n      work_full_msg  = '';\n      work_short_msg = '';\n      work_text_msg  = '';\n      // -----------------------------------------------------\n      // Wenn die Warnung aktiv ist, dann Nachricht erstellen\n      // -----------------------------------------------------\n      if (warning_status[i] == 'on')\n      {\n        // ----------------------\n        // 1. Warnstufe auslesen\n        // ----------------------\n        level_text = entity_data[i].daten.attributes.severity;\n        // -----------------------------------------------------\n        // Schwere der Warnstufe in numerischen Wert √ºbersetzen\n        // -----------------------------------------------------\n        level = 1;\n        if (level_text != '' && typeof level_text !== 'undefined' && level_text !== null)\n        {\n          level_text = level_text.toLowerCase();\n          switch(level_text) {\n            case 'minor':\n              level = 1;\n              break;\n            case 'moderate':\n              level = 2;\n              break;\n            case 'severe':\n              level = 3;\n              break;\n            case 'extreme':\n              level = 4;\n              break;\n            default:\n              level = 1;\n          }\n          // ----------------------\n          // Warnstufen √ºbersetzen\n          // ----------------------\n          level_text = level_text.replace('minor', 'Gering').replace('moderate', 'M√§√üig').replace('severe', 'Schwer').replace('extreme', 'Extrem');\n        }\n        else\n        {\n          level_text = 'Keine';\n        }\n        // -----------------------------------\n        // 2.a Kopfzeile der Meldung auslesen\n        // -----------------------------------\n        headline = entity_data[i].daten.attributes.headline;\n        // -------------------------------------------\n        // 2.b Wetter-Symbole zur Kopfzeile ermitteln\n        // -------------------------------------------\n        weather_symbol = '';\n        if (show_weather_symbols)\n        {\n          for (var w = 0; w < weather_warnidx.length; w++)\n          {\n            if (headline.toUpperCase().indexOf(weather_warnidx[w]) !== -1) { weather_symbol += weather_symbols[w]; }\n          }\n        }\n        // -------------------------------------\n        // 3. Beschreibung der Meldung auslesen\n        // -------------------------------------\n        description = entity_data[i].daten.attributes.description;\n        // -------------------------------\n        // 4. Zeiten der Meldung auslesen\n        // -------------------------------\n        time_start = time_convert(entity_data[i].daten.attributes.start);\n        time_end = time_convert(entity_data[i].daten.attributes.expires);\n        time_text = \"Von \" + time_start + \" Uhr bis \" + time_end + \" Uhr.\";\n        // ---------------------------------------------------------------------\n        // Nachrichten aus den einzelnen Warnmeldungs-Komponenten zusammenbauen\n        // ---------------------------------------------------------------------\n        // Vollst√§ndige Meldung\n        // ---------------------\n        work_full_msg += \"***\" + headline + \"*** \" + weather_symbol + \"\\n\" +\n        warning_type + \"***\" + level_text + \" (\" + level + \")***\\n\" +\n        description + \"\\n\" +\n        time_text + trennlinie;\n        // ------------\n        // Kurzmeldung\n        // ------------\n        work_short_msg += headline + \" \" + weather_symbol + \"\\n\" + time_text + trennlinie;\n        work_short_msg = work_short_msg.replace(/ Uhr /g, ' ');\n        work_short_msg = work_short_msg.replace(/ um /g, ' ');\n        // -------------------\n        // Reine Text-Meldung\n        // -------------------\n        work_text_msg += headline + trennstrich +\n        warning_type + level_text + \" (\" + level + \")\" + trennstrich +\n        description + trennstrich +\n        time_text + ende_marker;\n        // -----------------\n        // Texte bereinigen\n        // -----------------\n        if (remove_pre_text_amtliche)\n        {\n          work_full_msg = work_full_msg.replace(/Amtliche Warnung vor /gis, '');\n          work_short_msg = work_short_msg.replace(/Amtliche Warnung vor /gis, '');\n          work_text_msg = work_text_msg.replace(/Amtliche Warnung vor /gis, '');\n        }\n        work_short_msg = work_short_msg.substring(0, 255) + \" (Details siehe HA-App)\" + trennlinie;\n        work_text_msg = work_text_msg.replace(/\\*\\*\\*/gis, '');\n        // -----------------------------------------------------------------\n        // Wenn doppelte Warnungen unterdr√ºckt werden sollen, pr√ºfen ob die\n        // Warnung schon in der Liste bekannter Warnungen enthalten ist\n        // -----------------------------------------------------------------\n        warning_exists = false;\n        if (suppress_double_warnings)\n        {\n          // ----------------------------------------------------------\n          // ID f√ºr die Warnung erstellen\n          // ----------------------------------------------------------\n          work_warning_id = headline.charAt(0).toString() +\n                          description.charAt(0).toString() +\n                          get_cs(work_text_msg).toString();\n          // ----------------------------------------------------------\n          // Wenn es schon eine Liste mit bekannten Warnungen gibt,\n          // ermitteln ob die neue Warnung darin bereits enthalten ist\n          // ----------------------------------------------------------\n          warnings_id_list = global.get(\"nina_nodered_warnings_list\");\n          warn_list_type = typeof warnings_id_list;\n          if (warnings_id_list != '' && warn_list_type !== 'undefined' && warn_list_type !== null)\n          {\n            if (warnings_id_list.indexOf(work_warning_id + ',') >= 0)\n            {\n              warning_exists = true;\n            }\n          }\n          else\n          {\n            warnings_id_list = '';\n          }\n          // -----------------------------------------------------\n          // Wenn es die Warnung noch nicht gibt, diese der Liste\n          // bekannter Warnungen hinzuf√ºgen und Liste speichern\n          // -----------------------------------------------------\n          if (!warning_exists)\n          {\n            warnings_id_list += work_warning_id + ',';\n            global.set(\"nina_nodered_warnings_list\", warnings_id_list);\n          }\n        }\n        // ----------------------------------\n        // Redundante Warnungen kennzeichnen\n        // ----------------------------------\n        if (warning_exists)\n        {\n          work_full_msg  = double_warn_flag + work_full_msg;\n          work_short_msg = double_warn_flag + work_short_msg;\n          work_text_msg  = double_warn_flag + work_text_msg;\n        }\n        // -----------------------------------------------------------------\n        // Warnmeldung f√ºr Ausgang 1 nur hinzuf√ºgen, wenn diese gr√∂√üer oder\n        // gleich der Mindest-Warnstufe ist und noch nicht existiert\n        // -----------------------------------------------------------------\n        if (level >= minimum_warning_level && !warning_exists)\n        {\n          warnings_to_show++;\n          full_message_1  += work_full_msg;\n          short_message_1 += work_short_msg;\n          text_message_1  += work_text_msg;\n        }\n        // ---------------------------------------------\n        // Warnmeldungen f√ºr Ausgang 2 immer hinzuf√ºgen\n        // ---------------------------------------------\n        full_message_2  += work_full_msg;\n        short_message_2 += work_short_msg;\n        text_message_2  += work_text_msg;\n      }\n    }\n  }\n  return;\n}","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":200,"wires":[["38e31dbc2c15905d","3ee21456151a05f1","76f0956322fee7cc"],["3d7aa60707871dc2","c6ac4af37b70e1d3","a9b60789a5d49a65"]]},{"id":"c18c64b8b7769eab","type":"server-state-changed","z":"9a4bca9e1b62b3d8","name":"1. NINA Warnungen triggern","server":"e5ff3427.b49de8","version":5,"outputs":1,"exposeAsEntityConfig":"","entityId":["binary_sensor.nina_warning_hoerstel_1","binary_sensor.nina_warning_hoerstel_2","binary_sensor.nina_warning_hoerstel_3","binary_sensor.nina_warning_hoerstel_4","binary_sensor.nina_warning_hoerstel_5"],"entityIdType":"list","outputInitially":false,"stateType":"str","ifState":"","ifStateType":"str","ifStateOperator":"is_not","outputOnlyOnStateChange":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"trigger_id","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"warnung_1","propertyType":"msg","value":"{\"daten\":$entities(\"binary_sensor.nina_warning_hoerstel_1\")}","valueType":"jsonata"},{"property":"warnung_2","propertyType":"msg","value":"{\"daten\":$entities(\"binary_sensor.nina_warning_hoerstel_2\")}","valueType":"jsonata"},{"property":"warnung_3","propertyType":"msg","value":"{\"daten\":$entities(\"binary_sensor.nina_warning_hoerstel_3\")}","valueType":"jsonata"},{"property":"warnung_4","propertyType":"msg","value":"{\"daten\":$entities(\"binary_sensor.nina_warning_hoerstel_4\")}","valueType":"jsonata"},{"property":"warnung_5","propertyType":"msg","value":"{\"daten\":$entities(\"binary_sensor.nina_warning_hoerstel_5\")}","valueType":"jsonata"}],"x":180,"y":120,"wires":[["2a616363f49a80dc"]]},{"id":"3ee21456151a05f1","type":"api-call-service","z":"9a4bca9e1b62b3d8","name":"3.a Nachricht an Telegram senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"telegram_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : payload.msg_full }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":120,"wires":[[]]},{"id":"3d7aa60707871dc2","type":"api-call-service","z":"9a4bca9e1b62b3d8","name":"3.c Nachricht an Dashboard senden (JSONata)","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.msg_full, '***', '**') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":780,"y":280,"wires":[[]]},{"id":"38e31dbc2c15905d","type":"api-call-service","z":"9a4bca9e1b62b3d8","name":"3.b Nachricht an HA-App senden","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_galaxy_von_michael","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\" : $replace(payload.msg_short, '***', '') }","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":740,"y":200,"wires":[[]]},{"id":"5559964d75d044c9","type":"comment","z":"9a4bca9e1b62b3d8","name":"NINA-Warnungen 1.50","info":"","x":160,"y":60,"wires":[]},{"id":"76f0956322fee7cc","type":"debug","z":"9a4bca9e1b62b3d8","d":true,"name":"Ausgang 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":60,"wires":[]},{"id":"c6ac4af37b70e1d3","type":"api-call-service","z":"9a4bca9e1b62b3d8","d":true,"name":"3.d Nachricht an Dashboard senden (JSON)","server":"e5ff3427.b49de8","version":5,"debugenabled":false,"domain":"notify","service":"persistent_notification","areaId":[],"deviceId":[],"entityId":[],"data":"{\"message\":\"{{payload.msg_text}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":750,"y":360,"wires":[[]]},{"id":"a9b60789a5d49a65","type":"debug","z":"9a4bca9e1b62b3d8","d":true,"name":"Ausgang 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":420,"wires":[]},{"id":"f9f6b27f796d2458","type":"inject","z":"9a4bca9e1b62b3d8","name":"Reset","props":[{"p":"zahl","v":"","vt":"num"},{"p":"text","v":"","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":130,"y":480,"wires":[["2bcc938b709f5356"]]},{"id":"2bcc938b709f5356","type":"function","z":"9a4bca9e1b62b3d8","name":"Liste alter NINA-Warnungen l√∂schen","func":"global.set(\"nina_nodered_warnings_list\", '');\nmsg.payload = [];\nvar output = {};\noutput.payload = {\n  meldung: \"Liste der alten NINA-Warnmeldungen gel√∂scht.\"\n}\nnode.send(output);\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":480,"wires":[["25f2f746afe12ec3"]]},{"id":"25f2f746afe12ec3","type":"debug","z":"9a4bca9e1b62b3d8","name":"Best√§tigung","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":480,"wires":[]},{"id":"e5ff3427.b49de8","type":"server","name":"Home Assistant","addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"","connectionDelay":false,"cacheJson":false,"heartbeat":false,"heartbeatInterval":"","statusSeparator":"","enableGlobalContextStore":false}]